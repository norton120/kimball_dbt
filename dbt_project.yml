
# Name your package! Package names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'k_dbt'
version: '0.1.0'

# This setting configures which "profile" dbt uses for this project. Profiles contain
# database connection information, and should be configured in the  ~/.dbt/profiles.yml file
profile: 'revzilla'

# These configurations specify where dbt should look for different types of files.
# The `source-paths` config, for example, states that source models can be found
# in the "models/" directory. You probably won't need to change these!
source-paths: ["screens","audits","staging_quality","dimensions","facts","artifacts","partials"]
analysis-paths: ["analysis"]
test-paths: ["tests"]
data-paths: ["seeds"]
macro-paths: ["macros"]

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
    - "target"
    - "dbt_modules"

quoting:
  identifier: false
  schema: false

models:
  k_dbt:

    vars:
      release: "Evil Knievel"
      app_version: 0.1.0
      dbt_version: 0.11.0
      production_database: 'DW2'

    partials:
      materialized: ephemeral

    audits:
      materialized: incremental
      sql_where: "TRUE"         ## This is legacy dbt that tells the framework to use the logic in the model.

    screens:
      materialized: view

## post-hooks here rely on naming conventions 
    post-hook: 
      - > 
         {% if (model.original_file_path.split('/')[0] == 'screens') and this.table != 'ERROR_EVENT_FACT' %} 
           INSERT INTO {{this.schema}}.ERROR_EVENT_FACT (SELECT * FROM {{this}});
           DROP VIEW {{this}};
         {% else %}
           SELECT NULL WHERE 1=0;
         {% endif %}
seeds:
  k_dbt:
    vars:
      release: "Evil Knievel"
      app_version: 0.1.0
      dbt_version: 0.11.0
      production_database: 'DW2'
    schema: SEED

