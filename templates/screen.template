---------- <model_name> SCREEN
----
---- Screens are source-data-quality tests that we use to investigate and record data quality.     
----
----
----
---------- Statement for establishing target_audit
----
---- The target audit data is applied to each screen. Set it in Jinja context here.
    {%- call statement target_audit, fetch_result = True -%}
        SELECT
            audit_key,
            cdc_target,
            lowest_cdc,
            highest_cdc
        FROM
            {{this.database}}.quality.audit
        WHERE
            database_key = '<database>'
        AND
            schema_key = '<schema>'
        AND
            entity_key = '<entity>'
        ORDER BY audit_key DESC 
        LIMIT 1
    {%- endcall -%}

    {%- set audit_data = load_result('target_audit') -%}
    {%- set audit_key = audit_data['audit_key'][0] -%}
    {%- set cdc_target = audit_data['cdc_target'][0] -%}
    {%- set lowest_cdc = audit_data['lowest_cdc'][0] -%}
    {%- set highest_cdc = audit_data['highest_cdc'][0] -%}

----
---- 
---- Screens accept 2 arguments: a dict with the target path, and a 2nd dict with keys for their respective properties.
----
----
---- All screens require an exception_action key with one of 4 values:
---- - Ignore : pass the record without action, but record the error
---- - Flag : pass the record but flag it as a quality issue 
---- - Reject : discard the record, record the error
---- - Halt : stop ETL process and sound alarm
---- Default value is Flag

{%- set target_path = {'database':'<database>', 'schema':'<schema>','entity':'<entity>'} -%}



WITH

target_audit AS (

),

---------- Column Property Screens
---- Column property screens check each record for questionable values.
---- Available screens:
---- 
----    - null_screen({'column':'<column_name>'})
----    - accepted_range_screen({'column':'<column_name>','min':'<min_value>','max':'<max_value>'})
----    - accepted_length_screen({'column':'<column_name>','min_length':'<min_length_value>','max_length':'<max_length_value>'})
----    - accepted_values_screen()
----    - pattern_screen()
----    - blacklist_screen()
----
---------- Structure Screens
---- Structure screens check relationships between columns and tables.
---- Available screens:
----
----    - foreign_key_screen()
----    - parent_child_screen()
----
----
----
----
---------- Business Screens
---- Business screens check record values against complex business logic.
---- For example, a business screen might be 
---- "Only customer records with an RFM score > 75 should be in the high-value segment."
---- In this example, pass the name of the screen 'high_value_customer_rfm_screen' and the sql_where, a statement 
---- WHERE clause that returns > 0 results on failure.
----
---- Example:
---- business_screen({'name':'high_value_rfm_screen', 'sql_where':' "segment = \'High Value\' AND rfm_score < 100"})
----
----

---------- MODEL CONFIGURATION
{{config({

    "materialized":"ephemerial",
    "sql_where":"TRUE",
    "schema":"QUALITY"

})}}
    
